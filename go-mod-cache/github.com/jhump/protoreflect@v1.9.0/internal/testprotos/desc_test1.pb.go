// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.0
// source: desc_test1.proto

package testprotos

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Comment for NestedEnum
type TestMessage_NestedEnum int32

const (
	// Comment for VALUE1
	TestMessage_VALUE1 TestMessage_NestedEnum = 1
	// Comment for VALUE2
	TestMessage_VALUE2 TestMessage_NestedEnum = 2
)

// Enum value maps for TestMessage_NestedEnum.
var (
	TestMessage_NestedEnum_name = map[int32]string{
		1: "VALUE1",
		2: "VALUE2",
	}
	TestMessage_NestedEnum_value = map[string]int32{
		"VALUE1": 1,
		"VALUE2": 2,
	}
)

func (x TestMessage_NestedEnum) Enum() *TestMessage_NestedEnum {
	p := new(TestMessage_NestedEnum)
	*p = x
	return p
}

func (x TestMessage_NestedEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestMessage_NestedEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_test1_proto_enumTypes[0].Descriptor()
}

func (TestMessage_NestedEnum) Type() protoreflect.EnumType {
	return &file_desc_test1_proto_enumTypes[0]
}

func (x TestMessage_NestedEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TestMessage_NestedEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TestMessage_NestedEnum(num)
	return nil
}

// Deprecated: Use TestMessage_NestedEnum.Descriptor instead.
func (TestMessage_NestedEnum) EnumDescriptor() ([]byte, []int) {
	return file_desc_test1_proto_rawDescGZIP(), []int{0, 0}
}

// Comment for DeeplyNestedEnum
type TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum int32

const (
	// Comment for VALUE1
	TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_VALUE1 TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum = 1
	// Comment for VALUE2
	TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_VALUE2 TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum = 2
)

// Enum value maps for TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum.
var (
	TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum_name = map[int32]string{
		1: "VALUE1",
		2: "VALUE2",
	}
	TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum_value = map[string]int32{
		"VALUE1": 1,
		"VALUE2": 2,
	}
)

func (x TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum) Enum() *TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum {
	p := new(TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum)
	*p = x
	return p
}

func (x TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_desc_test1_proto_enumTypes[1].Descriptor()
}

func (TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum) Type() protoreflect.EnumType {
	return &file_desc_test1_proto_enumTypes[1]
}

func (x TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum(num)
	return nil
}

// Deprecated: Use TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum.Descriptor instead.
func (TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum) EnumDescriptor() ([]byte, []int) {
	return file_desc_test1_proto_rawDescGZIP(), []int{0, 0, 0, 0, 0}
}

// Comment for TestMessage
type TestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Comment for nm
	Nm *TestMessage_NestedMessage `protobuf:"bytes,1,opt,name=nm" json:"nm,omitempty"`
	// Comment for anm
	Anm *TestMessage_NestedMessage_AnotherNestedMessage `protobuf:"bytes,2,opt,name=anm" json:"anm,omitempty"`
	// Comment for yanm
	Yanm *TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage `protobuf:"bytes,3,opt,name=yanm" json:"yanm,omitempty"`
	// Comment for ne
	Ne []TestMessage_NestedEnum `protobuf:"varint,4,rep,name=ne,enum=testprotos.TestMessage_NestedEnum" json:"ne,omitempty"`
}

func (x *TestMessage) Reset() {
	*x = TestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_test1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage) ProtoMessage() {}

func (x *TestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_desc_test1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMessage.ProtoReflect.Descriptor instead.
func (*TestMessage) Descriptor() ([]byte, []int) {
	return file_desc_test1_proto_rawDescGZIP(), []int{0}
}

func (x *TestMessage) GetNm() *TestMessage_NestedMessage {
	if x != nil {
		return x.Nm
	}
	return nil
}

func (x *TestMessage) GetAnm() *TestMessage_NestedMessage_AnotherNestedMessage {
	if x != nil {
		return x.Anm
	}
	return nil
}

func (x *TestMessage) GetYanm() *TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage {
	if x != nil {
		return x.Yanm
	}
	return nil
}

func (x *TestMessage) GetNe() []TestMessage_NestedEnum {
	if x != nil {
		return x.Ne
	}
	return nil
}

// Comment for AnotherTestMessage
type AnotherTestMessage struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	// Comment for dne
	Dne *TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum `protobuf:"varint,1,opt,name=dne,enum=testprotos.TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum" json:"dne,omitempty"`
	// Comment for map_field1
	MapField1 map[int32]string `protobuf:"bytes,2,rep,name=map_field1,json=mapField1" json:"map_field1,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Comment for map_field2
	MapField2 map[int64]float32 `protobuf:"bytes,3,rep,name=map_field2,json=mapField2" json:"map_field2,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	// Comment for map_field3
	MapField3 map[uint32]bool `protobuf:"bytes,4,rep,name=map_field3,json=mapField3" json:"map_field3,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	// Comment for map_field4
	MapField4 map[string]*AnotherTestMessage `protobuf:"bytes,5,rep,name=map_field4,json=mapField4" json:"map_field4,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Rocknroll *AnotherTestMessage_RockNRoll  `protobuf:"group,6,opt,name=RockNRoll,json=rocknroll" json:"rocknroll,omitempty"`
	// Comment for atmoo
	//
	// Types that are assignable to Atmoo:
	//	*AnotherTestMessage_Str
	//	*AnotherTestMessage_Int
	Atmoo isAnotherTestMessage_Atmoo `protobuf_oneof:"atmoo"`
	// Deprecated: Do not use.
	Withoptions *AnotherTestMessage_WithOptions `protobuf:"group,9,opt,name=WithOptions,json=withoptions" json:"withoptions,omitempty"`
}

func (x *AnotherTestMessage) Reset() {
	*x = AnotherTestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_test1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnotherTestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnotherTestMessage) ProtoMessage() {}

func (x *AnotherTestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_desc_test1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnotherTestMessage.ProtoReflect.Descriptor instead.
func (*AnotherTestMessage) Descriptor() ([]byte, []int) {
	return file_desc_test1_proto_rawDescGZIP(), []int{1}
}

var extRange_AnotherTestMessage = []protoiface.ExtensionRangeV1{
	{Start: 100, End: 200},
}

// Deprecated: Use AnotherTestMessage.ProtoReflect.Descriptor.ExtensionRanges instead.
func (*AnotherTestMessage) ExtensionRangeArray() []protoiface.ExtensionRangeV1 {
	return extRange_AnotherTestMessage
}

func (x *AnotherTestMessage) GetDne() TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum {
	if x != nil && x.Dne != nil {
		return *x.Dne
	}
	return TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_VALUE1
}

func (x *AnotherTestMessage) GetMapField1() map[int32]string {
	if x != nil {
		return x.MapField1
	}
	return nil
}

func (x *AnotherTestMessage) GetMapField2() map[int64]float32 {
	if x != nil {
		return x.MapField2
	}
	return nil
}

func (x *AnotherTestMessage) GetMapField3() map[uint32]bool {
	if x != nil {
		return x.MapField3
	}
	return nil
}

func (x *AnotherTestMessage) GetMapField4() map[string]*AnotherTestMessage {
	if x != nil {
		return x.MapField4
	}
	return nil
}

func (x *AnotherTestMessage) GetRocknroll() *AnotherTestMessage_RockNRoll {
	if x != nil {
		return x.Rocknroll
	}
	return nil
}

func (m *AnotherTestMessage) GetAtmoo() isAnotherTestMessage_Atmoo {
	if m != nil {
		return m.Atmoo
	}
	return nil
}

func (x *AnotherTestMessage) GetStr() string {
	if x, ok := x.GetAtmoo().(*AnotherTestMessage_Str); ok {
		return x.Str
	}
	return ""
}

func (x *AnotherTestMessage) GetInt() int64 {
	if x, ok := x.GetAtmoo().(*AnotherTestMessage_Int); ok {
		return x.Int
	}
	return 0
}

// Deprecated: Do not use.
func (x *AnotherTestMessage) GetWithoptions() *AnotherTestMessage_WithOptions {
	if x != nil {
		return x.Withoptions
	}
	return nil
}

type isAnotherTestMessage_Atmoo interface {
	isAnotherTestMessage_Atmoo()
}

type AnotherTestMessage_Str struct {
	// Comment for str
	Str string `protobuf:"bytes,7,opt,name=str,oneof"`
}

type AnotherTestMessage_Int struct {
	// Comment for int
	Int int64 `protobuf:"varint,8,opt,name=int,oneof"`
}

func (*AnotherTestMessage_Str) isAnotherTestMessage_Atmoo() {}

func (*AnotherTestMessage_Int) isAnotherTestMessage_Atmoo() {}

// Comment for NestedMessage
type TestMessage_NestedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Comment for anm
	Anm *TestMessage_NestedMessage_AnotherNestedMessage `protobuf:"bytes,1,opt,name=anm" json:"anm,omitempty"`
	// Comment for yanm
	Yanm *TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage `protobuf:"bytes,2,opt,name=yanm" json:"yanm,omitempty"`
}

func (x *TestMessage_NestedMessage) Reset() {
	*x = TestMessage_NestedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_test1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMessage_NestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage_NestedMessage) ProtoMessage() {}

func (x *TestMessage_NestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_desc_test1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMessage_NestedMessage.ProtoReflect.Descriptor instead.
func (*TestMessage_NestedMessage) Descriptor() ([]byte, []int) {
	return file_desc_test1_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TestMessage_NestedMessage) GetAnm() *TestMessage_NestedMessage_AnotherNestedMessage {
	if x != nil {
		return x.Anm
	}
	return nil
}

func (x *TestMessage_NestedMessage) GetYanm() *TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage {
	if x != nil {
		return x.Yanm
	}
	return nil
}

// Comment for AnotherNestedMessage
type TestMessage_NestedMessage_AnotherNestedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Comment for yanm
	Yanm []*TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage `protobuf:"bytes,1,rep,name=yanm" json:"yanm,omitempty"`
}

func (x *TestMessage_NestedMessage_AnotherNestedMessage) Reset() {
	*x = TestMessage_NestedMessage_AnotherNestedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_test1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMessage_NestedMessage_AnotherNestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage_NestedMessage_AnotherNestedMessage) ProtoMessage() {}

func (x *TestMessage_NestedMessage_AnotherNestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_desc_test1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMessage_NestedMessage_AnotherNestedMessage.ProtoReflect.Descriptor instead.
func (*TestMessage_NestedMessage_AnotherNestedMessage) Descriptor() ([]byte, []int) {
	return file_desc_test1_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *TestMessage_NestedMessage_AnotherNestedMessage) GetYanm() []*TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage {
	if x != nil {
		return x.Yanm
	}
	return nil
}

// Comment for YetAnotherNestedMessage
type TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Comment for foo
	Foo *string `protobuf:"bytes,1,opt,name=foo" json:"foo,omitempty"`
	// Comment for bar
	Bar *int32 `protobuf:"varint,2,opt,name=bar" json:"bar,omitempty"`
	// Comment for baz
	Baz []byte `protobuf:"bytes,3,opt,name=baz" json:"baz,omitempty"`
	// Comment for dne
	Dne *TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum `protobuf:"varint,4,opt,name=dne,enum=testprotos.TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum" json:"dne,omitempty"`
	// Comment for anm
	Anm *TestMessage_NestedMessage_AnotherNestedMessage `protobuf:"bytes,5,opt,name=anm" json:"anm,omitempty"`
	// Comment for nm
	Nm *TestMessage_NestedMessage `protobuf:"bytes,6,opt,name=nm" json:"nm,omitempty"`
	// Comment for tm
	Tm *TestMessage `protobuf:"bytes,7,opt,name=tm" json:"tm,omitempty"`
}

func (x *TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage) Reset() {
	*x = TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_test1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage) ProtoMessage() {}

func (x *TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_desc_test1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage.ProtoReflect.Descriptor instead.
func (*TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage) Descriptor() ([]byte, []int) {
	return file_desc_test1_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage) GetFoo() string {
	if x != nil && x.Foo != nil {
		return *x.Foo
	}
	return ""
}

func (x *TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage) GetBar() int32 {
	if x != nil && x.Bar != nil {
		return *x.Bar
	}
	return 0
}

func (x *TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage) GetBaz() []byte {
	if x != nil {
		return x.Baz
	}
	return nil
}

func (x *TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage) GetDne() TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum {
	if x != nil && x.Dne != nil {
		return *x.Dne
	}
	return TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_VALUE1
}

func (x *TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage) GetAnm() *TestMessage_NestedMessage_AnotherNestedMessage {
	if x != nil {
		return x.Anm
	}
	return nil
}

func (x *TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage) GetNm() *TestMessage_NestedMessage {
	if x != nil {
		return x.Nm
	}
	return nil
}

func (x *TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage) GetTm() *TestMessage {
	if x != nil {
		return x.Tm
	}
	return nil
}

// Comment for RockNRoll
type AnotherTestMessage_RockNRoll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Comment for beatles
	Beatles *string `protobuf:"bytes,1,opt,name=beatles" json:"beatles,omitempty"`
	// Comment for stones
	Stones *string `protobuf:"bytes,2,opt,name=stones" json:"stones,omitempty"`
	// Comment for doors
	Doors *string `protobuf:"bytes,3,opt,name=doors" json:"doors,omitempty"`
}

func (x *AnotherTestMessage_RockNRoll) Reset() {
	*x = AnotherTestMessage_RockNRoll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_test1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnotherTestMessage_RockNRoll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnotherTestMessage_RockNRoll) ProtoMessage() {}

func (x *AnotherTestMessage_RockNRoll) ProtoReflect() protoreflect.Message {
	mi := &file_desc_test1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnotherTestMessage_RockNRoll.ProtoReflect.Descriptor instead.
func (*AnotherTestMessage_RockNRoll) Descriptor() ([]byte, []int) {
	return file_desc_test1_proto_rawDescGZIP(), []int{1, 4}
}

func (x *AnotherTestMessage_RockNRoll) GetBeatles() string {
	if x != nil && x.Beatles != nil {
		return *x.Beatles
	}
	return ""
}

func (x *AnotherTestMessage_RockNRoll) GetStones() string {
	if x != nil && x.Stones != nil {
		return *x.Stones
	}
	return ""
}

func (x *AnotherTestMessage_RockNRoll) GetDoors() string {
	if x != nil && x.Doors != nil {
		return *x.Doors
	}
	return ""
}

// Comment for WithOptions
type AnotherTestMessage_WithOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnotherTestMessage_WithOptions) Reset() {
	*x = AnotherTestMessage_WithOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_desc_test1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnotherTestMessage_WithOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnotherTestMessage_WithOptions) ProtoMessage() {}

func (x *AnotherTestMessage_WithOptions) ProtoReflect() protoreflect.Message {
	mi := &file_desc_test1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnotherTestMessage_WithOptions.ProtoReflect.Descriptor instead.
func (*AnotherTestMessage_WithOptions) Descriptor() ([]byte, []int) {
	return file_desc_test1_proto_rawDescGZIP(), []int{1, 5}
}

var file_desc_test1_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*AnotherTestMessage)(nil),
		ExtensionType: (*TestMessage)(nil),
		Field:         100,
		Name:          "testprotos.xtm",
		Tag:           "bytes,100,opt,name=xtm",
		Filename:      "desc_test1.proto",
	},
	{
		ExtendedType:  (*AnotherTestMessage)(nil),
		ExtensionType: (*string)(nil),
		Field:         101,
		Name:          "testprotos.xs",
		Tag:           "bytes,101,opt,name=xs",
		Filename:      "desc_test1.proto",
	},
	{
		ExtendedType:  (*AnotherTestMessage)(nil),
		ExtensionType: (*int32)(nil),
		Field:         102,
		Name:          "testprotos.xi",
		Tag:           "varint,102,opt,name=xi",
		Filename:      "desc_test1.proto",
	},
	{
		ExtendedType:  (*AnotherTestMessage)(nil),
		ExtensionType: (*uint64)(nil),
		Field:         103,
		Name:          "testprotos.xui",
		Tag:           "varint,103,opt,name=xui",
		Filename:      "desc_test1.proto",
	},
	{
		ExtendedType:  (*AnotherTestMessage)(nil),
		ExtensionType: ([]bool)(nil),
		Field:         200,
		Name:          "testprotos.TestMessage.NestedMessage.AnotherNestedMessage.flags",
		Tag:           "varint,200,rep,packed,name=flags",
		Filename:      "desc_test1.proto",
	},
}

// Extension fields to AnotherTestMessage.
var (
	// Comment for xtm
	//
	// optional testprotos.TestMessage xtm = 100;
	E_Xtm = &file_desc_test1_proto_extTypes[0]
	// Comment for xs
	//
	// optional string xs = 101;
	E_Xs = &file_desc_test1_proto_extTypes[1]
	// Comment for xi
	//
	// optional int32 xi = 102;
	E_Xi = &file_desc_test1_proto_extTypes[2]
	// Comment for xui
	//
	// optional uint64 xui = 103;
	E_Xui = &file_desc_test1_proto_extTypes[3]
	// Comment for flags
	//
	// repeated bool flags = 200;
	E_TestMessage_NestedMessage_AnotherNestedMessage_Flags = &file_desc_test1_proto_extTypes[4]
)

var File_desc_test1_proto protoreflect.FileDescriptor

var file_desc_test1_proto_rawDesc = []byte{
	0x0a, 0x10, 0x64, 0x65, 0x73, 0x63, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x31, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22, 0xfb,
	0x08, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35,
	0x0a, 0x02, 0x6e, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x02, 0x6e, 0x6d, 0x12, 0x4c, 0x0a, 0x03, 0x61, 0x6e, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03,
	0x61, 0x6e, 0x6d, 0x12, 0x66, 0x0a, 0x04, 0x79, 0x61, 0x6e, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x52, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x59, 0x65,
	0x74, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x79, 0x61, 0x6e, 0x6d, 0x12, 0x32, 0x0a, 0x02, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x02, 0x6e, 0x65, 0x1a,
	0xa4, 0x06, 0x0a, 0x0d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x4c, 0x0a, 0x03, 0x61, 0x6e, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x61, 0x6e, 0x6d, 0x12,
	0x66, 0x0a, 0x04, 0x79, 0x61, 0x6e, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x59, 0x65, 0x74, 0x41, 0x6e, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x79, 0x61, 0x6e, 0x6d, 0x1a, 0xdc, 0x04, 0x0a, 0x14, 0x41, 0x6e, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x66, 0x0a, 0x04, 0x79, 0x61, 0x6e, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x52,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x59, 0x65, 0x74, 0x41, 0x6e,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x79, 0x61, 0x6e, 0x6d, 0x1a, 0xa0, 0x03, 0x0a, 0x17, 0x59, 0x65, 0x74,
	0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x6f, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x66, 0x6f, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x61, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x62, 0x61, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x61, 0x7a, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x62, 0x61, 0x7a, 0x12, 0x75, 0x0a, 0x03, 0x64, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x63, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41,
	0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x59, 0x65, 0x74, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x65, 0x70,
	0x6c, 0x79, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x03, 0x64, 0x6e,
	0x65, 0x12, 0x4c, 0x0a, 0x03, 0x61, 0x6e, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x61, 0x6e, 0x6d, 0x12,
	0x35, 0x0a, 0x02, 0x6e, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x02, 0x6e, 0x6d, 0x12, 0x27, 0x0a, 0x02, 0x74, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x02, 0x74, 0x6d, 0x22,
	0x2a, 0x0a, 0x10, 0x44, 0x65, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x31, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x32, 0x10, 0x02, 0x32, 0x39, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x08, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x24, 0x0a, 0x0a, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x31, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x32, 0x10, 0x02, 0x22, 0x91, 0x08, 0x0a,
	0x12, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x75, 0x0a, 0x03, 0x64, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x63, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x59, 0x65, 0x74,
	0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x65, 0x70, 0x6c, 0x79, 0x4e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x03, 0x64, 0x6e, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x6d, 0x61,
	0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d,
	0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d,
	0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x31, 0x12, 0x4c, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x12, 0x4c, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x33, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x33, 0x12, 0x4c, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x34, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x34, 0x12, 0x46, 0x0a, 0x09, 0x72, 0x6f, 0x63, 0x6b, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0a, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x52, 0x6f, 0x63, 0x6b, 0x4e, 0x52, 0x6f, 0x6c, 0x6c, 0x52,
	0x09, 0x72, 0x6f, 0x63, 0x6b, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x03, 0x73, 0x74,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x12,
	0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x69,
	0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0a, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x33, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c,
	0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41,
	0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x09,
	0x52, 0x6f, 0x63, 0x6b, 0x4e, 0x52, 0x6f, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x65, 0x61,
	0x74, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x65, 0x61, 0x74,
	0x6c, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x6f, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6f, 0x6f, 0x72,
	0x73, 0x1a, 0x0d, 0x0a, 0x0b, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2a, 0x05, 0x08, 0x64, 0x10, 0xc9, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x61, 0x74, 0x6d, 0x6f, 0x6f,
	0x3a, 0x49, 0x0a, 0x03, 0x78, 0x74, 0x6d, 0x12, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x78, 0x74, 0x6d, 0x3a, 0x2e, 0x0a, 0x02, 0x78,
	0x73, 0x12, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41,
	0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x78, 0x73, 0x3a, 0x2e, 0x0a, 0x02, 0x78,
	0x69, 0x12, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41,
	0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x78, 0x69, 0x3a, 0x30, 0x0a, 0x03, 0x78,
	0x75, 0x69, 0x12, 0x1e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x78, 0x75, 0x69, 0x42, 0x33, 0x5a,
	0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x68, 0x75, 0x6d,
	0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73,
}

var (
	file_desc_test1_proto_rawDescOnce sync.Once
	file_desc_test1_proto_rawDescData = file_desc_test1_proto_rawDesc
)

func file_desc_test1_proto_rawDescGZIP() []byte {
	file_desc_test1_proto_rawDescOnce.Do(func() {
		file_desc_test1_proto_rawDescData = protoimpl.X.CompressGZIP(file_desc_test1_proto_rawDescData)
	})
	return file_desc_test1_proto_rawDescData
}

var file_desc_test1_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_desc_test1_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_desc_test1_proto_goTypes = []interface{}{
	(TestMessage_NestedEnum)(0), // 0: testprotos.TestMessage.NestedEnum
	(TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage_DeeplyNestedEnum)(0), // 1: testprotos.TestMessage.NestedMessage.AnotherNestedMessage.YetAnotherNestedMessage.DeeplyNestedEnum
	(*TestMessage)(nil),                                    // 2: testprotos.TestMessage
	(*AnotherTestMessage)(nil),                             // 3: testprotos.AnotherTestMessage
	(*TestMessage_NestedMessage)(nil),                      // 4: testprotos.TestMessage.NestedMessage
	(*TestMessage_NestedMessage_AnotherNestedMessage)(nil), // 5: testprotos.TestMessage.NestedMessage.AnotherNestedMessage
	(*TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage)(nil), // 6: testprotos.TestMessage.NestedMessage.AnotherNestedMessage.YetAnotherNestedMessage
	nil,                                    // 7: testprotos.AnotherTestMessage.MapField1Entry
	nil,                                    // 8: testprotos.AnotherTestMessage.MapField2Entry
	nil,                                    // 9: testprotos.AnotherTestMessage.MapField3Entry
	nil,                                    // 10: testprotos.AnotherTestMessage.MapField4Entry
	(*AnotherTestMessage_RockNRoll)(nil),   // 11: testprotos.AnotherTestMessage.RockNRoll
	(*AnotherTestMessage_WithOptions)(nil), // 12: testprotos.AnotherTestMessage.WithOptions
}
var file_desc_test1_proto_depIdxs = []int32{
	4,  // 0: testprotos.TestMessage.nm:type_name -> testprotos.TestMessage.NestedMessage
	5,  // 1: testprotos.TestMessage.anm:type_name -> testprotos.TestMessage.NestedMessage.AnotherNestedMessage
	6,  // 2: testprotos.TestMessage.yanm:type_name -> testprotos.TestMessage.NestedMessage.AnotherNestedMessage.YetAnotherNestedMessage
	0,  // 3: testprotos.TestMessage.ne:type_name -> testprotos.TestMessage.NestedEnum
	1,  // 4: testprotos.AnotherTestMessage.dne:type_name -> testprotos.TestMessage.NestedMessage.AnotherNestedMessage.YetAnotherNestedMessage.DeeplyNestedEnum
	7,  // 5: testprotos.AnotherTestMessage.map_field1:type_name -> testprotos.AnotherTestMessage.MapField1Entry
	8,  // 6: testprotos.AnotherTestMessage.map_field2:type_name -> testprotos.AnotherTestMessage.MapField2Entry
	9,  // 7: testprotos.AnotherTestMessage.map_field3:type_name -> testprotos.AnotherTestMessage.MapField3Entry
	10, // 8: testprotos.AnotherTestMessage.map_field4:type_name -> testprotos.AnotherTestMessage.MapField4Entry
	11, // 9: testprotos.AnotherTestMessage.rocknroll:type_name -> testprotos.AnotherTestMessage.RockNRoll
	12, // 10: testprotos.AnotherTestMessage.withoptions:type_name -> testprotos.AnotherTestMessage.WithOptions
	5,  // 11: testprotos.TestMessage.NestedMessage.anm:type_name -> testprotos.TestMessage.NestedMessage.AnotherNestedMessage
	6,  // 12: testprotos.TestMessage.NestedMessage.yanm:type_name -> testprotos.TestMessage.NestedMessage.AnotherNestedMessage.YetAnotherNestedMessage
	6,  // 13: testprotos.TestMessage.NestedMessage.AnotherNestedMessage.yanm:type_name -> testprotos.TestMessage.NestedMessage.AnotherNestedMessage.YetAnotherNestedMessage
	1,  // 14: testprotos.TestMessage.NestedMessage.AnotherNestedMessage.YetAnotherNestedMessage.dne:type_name -> testprotos.TestMessage.NestedMessage.AnotherNestedMessage.YetAnotherNestedMessage.DeeplyNestedEnum
	5,  // 15: testprotos.TestMessage.NestedMessage.AnotherNestedMessage.YetAnotherNestedMessage.anm:type_name -> testprotos.TestMessage.NestedMessage.AnotherNestedMessage
	4,  // 16: testprotos.TestMessage.NestedMessage.AnotherNestedMessage.YetAnotherNestedMessage.nm:type_name -> testprotos.TestMessage.NestedMessage
	2,  // 17: testprotos.TestMessage.NestedMessage.AnotherNestedMessage.YetAnotherNestedMessage.tm:type_name -> testprotos.TestMessage
	3,  // 18: testprotos.AnotherTestMessage.MapField4Entry.value:type_name -> testprotos.AnotherTestMessage
	3,  // 19: testprotos.xtm:extendee -> testprotos.AnotherTestMessage
	3,  // 20: testprotos.xs:extendee -> testprotos.AnotherTestMessage
	3,  // 21: testprotos.xi:extendee -> testprotos.AnotherTestMessage
	3,  // 22: testprotos.xui:extendee -> testprotos.AnotherTestMessage
	3,  // 23: testprotos.TestMessage.NestedMessage.AnotherNestedMessage.flags:extendee -> testprotos.AnotherTestMessage
	2,  // 24: testprotos.xtm:type_name -> testprotos.TestMessage
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	24, // [24:25] is the sub-list for extension type_name
	19, // [19:24] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_desc_test1_proto_init() }
func file_desc_test1_proto_init() {
	if File_desc_test1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_desc_test1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_test1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnotherTestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_desc_test1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMessage_NestedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_test1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMessage_NestedMessage_AnotherNestedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_test1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestMessage_NestedMessage_AnotherNestedMessage_YetAnotherNestedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_test1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnotherTestMessage_RockNRoll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_desc_test1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnotherTestMessage_WithOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_desc_test1_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AnotherTestMessage_Str)(nil),
		(*AnotherTestMessage_Int)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_desc_test1_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 5,
			NumServices:   0,
		},
		GoTypes:           file_desc_test1_proto_goTypes,
		DependencyIndexes: file_desc_test1_proto_depIdxs,
		EnumInfos:         file_desc_test1_proto_enumTypes,
		MessageInfos:      file_desc_test1_proto_msgTypes,
		ExtensionInfos:    file_desc_test1_proto_extTypes,
	}.Build()
	File_desc_test1_proto = out.File
	file_desc_test1_proto_rawDesc = nil
	file_desc_test1_proto_goTypes = nil
	file_desc_test1_proto_depIdxs = nil
}
